func factorial(n : int) : int {
    if n == 0 { return 0; }
    if n == 1 { return 1; }
    return n * factorial(n - 1);
}
number := factorial(5);


alive : bool = true;
inferedAlive := true;

func add_three(n1 : int, n2 : int, n3 : int) : int {
    return n1 + n2 + n3;
}

number_two := add_three(3, 2, 1);

/* TODO: This brokey
if 5 != 2 {
    n_one := add_three(7,8,9);
} else {
    n_two := add_three(number_two, number, 6);
}
*/

fourteen := factorial(7);

/* TODO: Also brokey
func fibonacci(n : int) : int {
	 if n == 0 || n == 1 { return n; }
	 return fibonacci(n-1) + fibonacci(n-2);
}

fib := fibonacci(2);

*/

/* Double brokey
i := 0;
loop {
}
    if i < 10 {
        i = i + 1;
        continue;
    }
    else {
        break;
    }
    
    i = i * 2;
}
*/
